// SPDX-FileCopyrightText: the secureCodeBox authors
//
// SPDX-License-Identifier: Apache-2.0

plugins {
    id 'java'
    id "io.freefair.lombok" version "8.1.0"
    id 'idea'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
    // https://github.com/ben-manes/gradle-versions-plugin
    // Run: ./gradlew dependencyUpdates -Drevision=release
    id "com.github.ben-manes.versions" version "0.47.0"
    id 'pl.allegro.tech.build.axion-release' version '1.15.4'
}

group 'io.securecodebox'
sourceCompatibility = '17'

scmVersion {
    tag {
        prefix.set('') // Remove the plugin's default "v" tag prefix
    }

    useHighestVersion.set(true) // https://axion-release-plugin.readthedocs.io/en/latest/configuration/version/#tag-with-the-highest-version
}
version = scmVersion.version

repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    implementation group: 'org.springframework', name: 'spring-web', version: '5.3.28'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.2'

    testImplementation(platform('org.junit:junit-bom:5.10.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation 'org.springframework:spring-test:5.3.28'
    testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'
    testImplementation 'org.mockito:mockito-core:5.4.0'
    testImplementation "org.mockito:mockito-junit-jupiter:5.4.0"
    testImplementation 'uk.org.webcompere:system-stubs-jupiter:2.0.2'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.15'
}

publishing {
    publications.register("jar", MavenPublication) {
        from components.java
        pom {
            name = 'DefectDojo Client Java'
            description = 'Java Client to interact with the DefectDojo API.'
            url = 'https://github.com/secureCodeBox/defectdojo-client-java'
            licenses {
                license {
                    name = 'The Apache License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            developers {
                developer {
                    id = 'jannik.hollenbach'
                    name = 'Jannik Hollenbach'
                    email = 'jannik.hollenbach@iteratec.com'
                }
                developer {
                    id = 'robert.seedorff'
                    name = 'Robert Seedorff'
                    email = 'robert.seedorff@iteratec.com'
                }
                developer {
                    id = 'johannes.zahn'
                    name = 'Johannes Zahn'
                    email = 'johannes.zahn@iteratec.com'
                }
                developer {
                    id = 'sven.strittmatter'
                    name = 'Sven Strittmatter'
                    email = 'sven.strittmatter@iteratec.com'
                }
                developer {
                    id = 'heiko.kiesel'
                    name = 'Heiko Kiesel'
                    email = 'heiko.kiesel@iteratec.com'
                }
            }
            scm {
                connection = 'scm:git@github.com:secureCodeBox/defectdojo-client-java.git'
                developerConnection = 'scm:git@github.com:secureCodeBox/defectdojo-client-java.git'
                url = 'https://github.com/secureCodeBox/defectdojo-client-java'
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

// Enforce running tests before publishing
tasks.withType(PublishToMavenRepository).configureEach {task ->
    task.dependsOn test
}

// https://docs.gradle.org/current/userguide/signing_plugin.html
signing {
    if (!version.endsWith('SNAPSHOT')) {  // only sign non-snapshot versions
        String signingKey = System.getenv("SIGNING_KEY")
        String signingPassword = System.getenv("SIGNING_PASSWORD")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.jar
    }
}

// https://github.com/johnrengelman/shadow/issues/718
tasks.withType(Zip).configureEach { task ->
    task.doLast {
        ant.checksum algorithm: 'md5', file: it.archivePath // required by sonatype
        ant.checksum algorithm: 'sha1', file: it.archivePath // required by sonatype
        ant.checksum algorithm: 'sha-256', file: it.archivePath, fileext: '.sha256'
        ant.checksum algorithm: 'sha-512', file: it.archivePath, fileext: '.sha512'
    }
}
